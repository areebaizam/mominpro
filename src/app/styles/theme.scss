// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.elevation-classes();
@include mat.app-background();

// Define the theme object.
$light-theme: mat.define-theme((color: (theme-type: light,
        primary: mat.$chartreuse-palette,
        tertiary: mat.$blue-palette,
      )));

$dark-theme: mat.define-theme((color: (theme-type: dark,
        primary: mat.$rose-palette,
        tertiary: mat.$blue-palette,
      )));

@mixin theme-override-variables($theme) {
  //Primary
  --primary: #{mat.get-theme-color($theme, primary)};
  --on-primary: #{mat.get-theme-color($theme, on-primary)};
  --primary-container: #{mat.get-theme-color($theme, primary-container)};
  --on-primary-container: #{mat.get-theme-color($theme, on-primary-container)};
  --primary-fixed: #{mat.get-theme-color($theme, primary-fixed)};
  --primary-fixed-dim: #{mat.get-theme-color($theme, primary-fixed-dim)};
  --on-primary-fixed: #{mat.get-theme-color($theme, on-primary-fixed)};
  --on-primary-fixed-variant: #{mat.get-theme-color($theme, on-primary-fixed-variant)};
  //Secondary
  --secondary: #{mat.get-theme-color($theme, secondary)};
  --on-secondary: #{mat.get-theme-color($theme, on-secondary)};
  --secondary-container: #{mat.get-theme-color($theme, secondary-container)};
  --on-secondary-container: #{mat.get-theme-color($theme, on-secondary-container)};
  --secondary-fixed: #{mat.get-theme-color($theme, secondary-fixed)};
  --secondary-fixed-dim: #{mat.get-theme-color($theme, secondary-fixed-dim)};
  --on-secondary-fixed: #{mat.get-theme-color($theme, on-secondary-fixed)};
  --on-secondary-fixed-variant: #{mat.get-theme-color($theme, on-secondary-fixed-variant)};
  //Tertiary
  --tertiary: #{mat.get-theme-color($theme, tertiary)};
  --on-tertiary: #{mat.get-theme-color($theme, on-tertiary)};
  --tertiary-container: #{mat.get-theme-color($theme, tertiary-container)};
  --on-tertiary-container: #{mat.get-theme-color($theme, on-tertiary-container)};
  --tertiary-fixed: #{mat.get-theme-color($theme, tertiary-fixed)};
  --tertiary-fixed-dim: #{mat.get-theme-color($theme, tertiary-fixed-dim)};
  --on-tertiary-fixed: #{mat.get-theme-color($theme, on-tertiary-fixed)};
  --on-tertiary-fixed-variant: #{mat.get-theme-color($theme, on-tertiary-fixed-variant)};
  //Error
  --error: #{mat.get-theme-color($theme, error)};
  --on-error: #{mat.get-theme-color($theme, on-error)};
  --error-container: #{mat.get-theme-color($theme, error-container)};
  --on-error-container: #{mat.get-theme-color($theme, on-error-container)};
  //Surface
  --surface-variant: #{mat.get-theme-color($theme, surface-variant)};
  --surface-dim: #{mat.get-theme-color($theme, surface-dim)};
  --surface: #{mat.get-theme-color($theme, surface)};
  --surface-bright: #{mat.get-theme-color($theme, surface-bright)};
  --surface-container-lowest: #{mat.get-theme-color($theme, surface-container-lowest)};
  --surface-container-low: #{mat.get-theme-color($theme, surface-container-low)};
  // --surface-container: #{mat.get-theme-color($theme, surface-container)};
  --surface-container-high: #{mat.get-theme-color($theme, surface-container-high)};
  --surface-container-highest: #{mat.get-theme-color($theme, surface-container-highest)};
  --on-surface: #{mat.get-theme-color($theme, on-surface)};
  --on-surface-variant: #{mat.get-theme-color($theme, on-surface-variant)};
  //Surface Container RGB Calculation for region overlay
  $surface-container: mat.get-theme-color($theme, surface-container);
  --surface-container: #{$surface-container};
  --surface-container-rgb: #{red($surface-container)},
  #{green($surface-container)},
  #{blue($surface-container)};
  //Outline
  --outline: #{mat.get-theme-color($theme, outline)};
  --outline-variant: #{mat.get-theme-color($theme, outline-variant)};
  //Inverse
  --inverse-primary: #{mat.get-theme-color($theme, inverse-primary)};
  --inverse-surface: #{mat.get-theme-color($theme, inverse-surface)};
  --inverse-on-surface: #{mat.get-theme-color($theme, inverse-on-surface)};
}

html {
  // Apply the light theme by default
  @include mat.all-component-themes($light-theme);
  @include theme-override-variables($light-theme);
  // Apply the dark theme only when the user prefers dark themes.
  // @media (prefers-color-scheme: dark) {
  //   // Use the `-color` mixins to only apply color styles without reapplying the same
  //   // typography and density styles.
  //   // @include mat.all-component-colors($dark-theme);
  // }
}

.dark-theme {
  @include mat.all-component-colors($dark-theme);
  @include theme-override-variables($dark-theme);
}

//Move these material variable to another custom themse file
.mat-toolbar {
  user-select: none;
  text-transform: capitalize;
  justify-content: space-between;
  --mat-toolbar-container-text-color: var(--primary);
  --mdc-icon-button-icon-color: var(--primary);

}

.mat-mdc-tab-link {
  --mat-tab-header-active-label-text-color: var(--primary);
  --mat-tab-header-active-focus-label-text-color: var(--primary);
  --mat-tab-header-active-hover-label-text-color: var(--primary);
  --mat-tab-header-inactive-label-text-color: var(--secondary);
  --mat-tab-header-inactive-focus-label-text-color: var(--primary);
  --mat-tab-header-inactive-hover-label-text-color: var(--primary);
}

.mdc-tab__text-label {
  --mat-tab-header-active-label-text-color: var(--primary);
  --mat-tab-header-active-focus-label-text-color: var(--primary);
  --mat-tab-header-inactive-label-text-color: var(--secondary);
}

.mat-mdc-form-field-subscript-wrapper {
  color: var(--secondary);
}

//TODO: Move this class to snackbar component or RENAME it
.mat-mdc-snack-bar-container {
  --mdc-snackbar-container-shape: 0 4px 4px 0;
  border-radius: 4px;

  .mat-mdc-snackbar-surface {
    padding: 0;
  }

  .mdc-snackbar__label {
    padding: 0;
  }

  &.success {
    --mdc-snackbar-container-color: var(--secondary-container);
    border-left: 8px solid var(--primary);
    --mdc-snackbar-supporting-text-color: var(--on-secondary-container);
    --mdc-linear-progress-active-indicator-color: var(--primary);
    --mdc-linear-progress-track-color: var(--secondary-container);
  }

  &.error {
    --mdc-snackbar-container-color: var(--error-container);
    --mdc-text-button-label-text-color: var(--error);
    --mdc-snackbar-supporting-text-color: var(--on-error-container);
    border-left: 8px solid var(--error);
    --mdc-linear-progress-active-indicator-color: var(--error);
    --mdc-linear-progress-track-color: var(--error-container);
  }
}